apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'

version("1.0.0")

build {
    copy {
        from("src/boot.conf")
        into("build/libs/")
        rename { String fileName ->
            fileName = "${archivesBaseName}-${version}.conf"
        }
    }
}

bootRun {
    jvmArgs(["--add-opens=java.base/java.lang=ALL-UNNAMED", "--add-opens=java.base/java.math=ALL-UNNAMED"])
}

bootJar {
    launchScript {
        enabled = true
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.apache.dubbo:dubbo-spring-boot-starter'

    implementation 'mysql:mysql-connector-java'
    implementation 'com.baomidou:mybatis-plus-boot-starter'
    implementation 'com.baomidou:dynamic-datasource-spring-boot-starter'
    implementation 'com.github.yulichang:mybatis-plus-join-boot-starter'
    implementation 'com.alibaba:druid-spring-boot-starter'
    implementation 'com.alibaba:transmittable-thread-local'

    implementation "com.alibaba.fastjson2:fastjson2"
    implementation "com.google.guava:guava"
    implementation "org.apache.commons:commons-lang3"
    implementation "cn.hutool:hutool-all"
    implementation 'org.apache.skywalking:apm-toolkit-trace'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'com.xingyuv:spring-boot-starter-captcha-plus:1.0.10'
    implementation 'com.aliyun:aliyun-java-sdk-core:4.6.4'
    implementation 'com.aliyun:aliyun-java-sdk-dysmsapi:2.2.1'
    implementation 'com.tencentcloudapi:tencentcloud-sdk-java-sms:3.1.853'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    implementation "org.springdoc:springdoc-openapi-ui"

    implementation project(":matrixiot-common")
    implementation project(":matrixiot-service-api")
    implementation project(":matrixiot-configuration")

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation 'org.mapstruct:mapstruct'
    annotationProcessor 'org.mapstruct:mapstruct-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

compileJava {
    options.compilerArgs << "-Amapstruct.unmappedTargetPolicy=IGNORE"
}
